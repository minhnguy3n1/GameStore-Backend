// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  password         String
  firstName        String
  lastName         String
  email            String   @unique
  isEmailValidated Boolean  @default(false)
  dateOfBirth      DateTime @default(now())
  createdAt        DateTime @default(now())
  stripeCustomerId String?

  roles String[] @default(["Customer"])
}

model Product {
  id          Int    @id @default(autoincrement())
  productName String @unique

  publisherId Int
  publisher   Publisher? @relation(fields: [publisherId], references: [id])

  categoryId    Int
  category      Category?       @relation(fields: [categoryId], references: [id])
  ProductOption ProductOption[]
  createdAt     DateTime        @default(now())
  image         String
  description   String
  price         Float
  available     Int
  stockId       Int
  stockStatus   StockStatus     @relation(fields: [stockId], references: [id])

  @@index([productName])
}

model Publisher {
  id            Int       @id @default(autoincrement())
  publisherName String    @unique
  Product       Product[]
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String    @unique
  Product      Product[]
}

model Code {
  id              Int           @id @default(autoincrement())
  code            String[]
  productOptionId Int
  productOption   ProductOption @relation(fields: [productOptionId], references: [id])
}

model ProductOption {
  id         Int     @id @default(autoincrement())
  optionName String
  productId  Int
  product    Product @relation(fields: [productId], references: [id])

  Code Code[]
}

model StockStatus {
  id         Int       @id @default(autoincrement())
  statusName String
  product    Product[]
}
